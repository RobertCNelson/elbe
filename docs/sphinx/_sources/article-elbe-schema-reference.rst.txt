*************************
ELBE XML Reference
*************************

.. __rootfilesystem_type_emphasis_rfs_rootfilesystemtype_emphasis:

RootFileSystem type: *rfs:RootFileSystemType*
=============================================

describes one elbe project. An elbe project contains the creation of
abuild environemt and the definition of a elbe target rootfilesystem.

.. _RootFileSystemType:

TYPE: RootFileSystemType
========================

includes all subelements to define the elbe project

.. __example:

Example
-------

::

   no sequence

.. _revisionNr:

SIMPLE TYPE: revisionNr
=======================

is used to decide if your elbe version is compatiblewith the given xml
file

.. __base_type:

Base Type
---------

*integer*

.. __restrictions:

Restrictions
------------

+-----------------------------------+-----------------------------------+
| *minInclusive*                    | 6                                 |
+-----------------------------------+-----------------------------------+
| *maxInclusive*                    | 6                                 |
+-----------------------------------+-----------------------------------+

.. _binary-url:

TYPE: binary-url
================

e.g. "http://myhost/debian /" or "http://debian.org/debian main"

.. __example_2:

Example
-------

::

   no sequence

.. _url:

TYPE: url
=========

links to one additional debian mirror

.. __example_3:

Example
-------

::

   no sequence

.. _url-list:

TYPE: url-list
==============

links to additional debian mirrors

.. __example_4:

Example
-------

.. code:: xml

   <url-list>
     <url> rfs:url </url>
   </url-list>

.. __element_description:

Element description
-------------------

url `rfs:url <#type-url>`__
   describes an additional debian mirror

.. _mirror:

TYPE: mirror
============

specify main and additional debian mirrors

.. __example_5:

Example
-------

::

   no sequence

.. _initvm:

TYPE: initvm
============

describes settings that apply to the creation of the initvm

.. __example_6:

Example
-------

::

   no sequence

.. _project:

TYPE: project
=============

describes elbe project settings that apply to the creation of the
targetrootfilesystem and include the definition of the build environment

.. __example_7:

Example
-------

::

   no sequence

.. _preference:

TYPE: preference
================

describes a global pinning of debian packages

.. __example_8:

Example
-------

::

   no sequence

.. _raw-preference:

TYPE: raw-preference
====================

content is directly written to /etc/apt/preferences.

.. __example_9:

Example
-------

::

   no sequence

.. _buildimage:

TYPE: buildimage
================

definition of the build environment

.. __example_10:

Example
-------

::

   no sequence

.. _memory:

TYPE: memory
============

Helper around memory_restriction to allow XML base attribute

.. __example_11:

Example
-------

::

   no sequence

.. _memory_restriction:

SIMPLE TYPE: memory_restriction
===============================

Memory can be specified using binary unit prefixes like MiB and GiB,or
SI prefixes like GB,MB or simply G or M.

.. __base_type_2:

Base Type
---------

*string*

.. __restrictions_2:

Restrictions
------------

+------+------+------+------+------+------+------+------+------+------+
| *pat | (\d+ | M    | G    | kB   | MB   | GB   | kiB  | MiB  | GiB) |
| tern | (k   |      |      |      |      |      |      |      | ?)   |
| *    |      |      |      |      |      |      |      |      |      |
+------+------+------+------+------+------+------+------+------+------+

.. _NIC:

TYPE: NIC
=========

describes a virtual network interface

.. __example_12:

Example
-------

::

   no sequence

.. _fw_proto:

TYPE: fw_proto
==============

Helper around fw_proto_restriction to allow XML base attribute

.. __example_13:

Example
-------

::

   no sequence

.. _fw_proto_restriction:

SIMPLE TYPE: fw_proto_restriction
=================================

only tcp and udp are allowed protocols for forwarding

.. __base_type_3:

Base Type
---------

*string*

.. __restrictions_3:

Restrictions
------------

+-----------------------------------+-----------------------------------+
| *enumeration*                     | tcp                               |
+-----------------------------------+-----------------------------------+
| *enumeration*                     | udp                               |
+-----------------------------------+-----------------------------------+

.. _forward:

TYPE: forward
=============

forward a network port from the build environment to the host machine

.. __example_14:

Example
-------

::

   no sequence

.. _portforwarding:

TYPE: portforwarding
====================

forward network ports from the build environment to the host machine

.. __example_15:

Example
-------

.. code:: xml

   <portforwarding>
     <forward> rfs:forward </forward>
   </portforwarding>

.. __element_description_2:

Element description
-------------------

forward `rfs:forward <#type-forward>`__
   describes a single port forward

.. _target:

TYPE: target
============

configuration of the target rootfilesystem

.. __example_16:

Example
-------

::

   no sequence

.. _debootstrapvarianttype:

TYPE: debootstrapvarianttype
============================

Enhanced restriction type specifying debootstrap variants.

.. __example_17:

Example
-------

::

   no sequence

.. _debootstrapvarianttype_restriction:

SIMPLE TYPE: debootstrapvarianttype_restriction
===============================================

Restriction type specifying debootstrap variants.Supported debootstrap
variants are minbase, buildd and fakechroot.The variant scratchbox is
not supported by th used debootstrap.

.. __base_type_4:

Base Type
---------

*string*

.. __restrictions_4:

Restrictions
------------

+-----------------------------------+-----------------------------------+
| *enumeration*                     | minbase                           |
+-----------------------------------+-----------------------------------+
| *enumeration*                     | buildd                            |
+-----------------------------------+-----------------------------------+
| *enumeration*                     | fakechroot                        |
+-----------------------------------+-----------------------------------+

.. _ubi_type:

TYPE: ubi_type
==============

Helper around ubi_type_restriction to allow XML base attribute

.. __example_18:

Example
-------

::

   no sequence

.. _ubi_type_restriction:

SIMPLE TYPE: ubi_type_restriction
=================================

a ubi volume can be either static or dynamic

.. __base_type_5:

Base Type
---------

*string*

.. __restrictions_5:

Restrictions
------------

+-----------------------------------+-----------------------------------+
| *enumeration*                     | static                            |
+-----------------------------------+-----------------------------------+
| *enumeration*                     | dynamic                           |
+-----------------------------------+-----------------------------------+

.. _ubi:

TYPE: ubi
=========

describes a ubi volume

.. __example_19:

Example
-------

::

   no sequence

.. _ubivg:

TYPE: ubivg
===========

container for all ubi volumes of a mtd device

.. __example_20:

Example
-------

.. code:: xml

   <ubivg>
     <label> rfs:string </label>
     <miniosize> rfs:string </miniosize>
     <maxlogicaleraseblockcount> rfs:string </maxlogicaleraseblockcount>
     <logicaleraseblocksize> rfs:string </logicaleraseblocksize>
     <physicaleraseblocksize> rfs:string </physicaleraseblocksize>
     <subpagesize> rfs:string </subpagesize>
   </ubivg>

.. __element_description_3:

Element description
-------------------

label `rfs:string <#type-string>`__
   human readable name; used to generate filename for the flashable
   image file

miniosize `rfs:string <#type-string>`__
   flash parameter minimal i/o size

maxlogicaleraseblockcount `rfs:string <#type-string>`__
   flash parameter maximum logical erase block count

logicaleraseblocksize `rfs:string <#type-string>`__
   flash parameter logical erase block size

physicaleraseblocksize `rfs:string <#type-string>`__
   flash parameter physical erase block size

subpagesize `rfs:string <#type-string>`__
   flash parameter subpagesize

.. _mtd:

TYPE: mtd
=========

describes a mtd device

.. __example_21:

Example
-------

::

   no sequence

.. _gpthd:

TYPE: gpthd
===========

describes a harddisk

.. __example_22:

Example
-------

.. code:: xml

   <gpthd>
     <name> rfs:string </name>
     <size> rfs:part_size </size>
     <grub-install> rfs:string </grub-install>
     <partition> rfs:partition </partition>
   </gpthd>

.. __element_description_4:

Element description
-------------------

name `rfs:string <#type-string>`__
   human readable name of the harddisk, this will be used as name for
   the image file

size `rfs:part_size <#type-part_size>`__
   size of the harddisk

grub-install `rfs:string <#type-string>`__
   human readable name of the harddisk, this will be used as name for
   the image file

partition `rfs:partition <#type-partition>`__
   Partition Entries of this harddisk

.. _binaryblob:

TYPE: binaryblob
================

a binary that is ddâ€™ed to the specified offset

.. __example_23:

Example
-------

::

   no sequence

.. _msdoshd:

TYPE: msdoshd
=============

describes a harddisk

.. __example_24:

Example
-------

.. code:: xml

   <msdoshd>
     <name> rfs:string </name>
     <size> rfs:part_size </size>
     <grub-install> rfs:string </grub-install>
     <binary> rfs:binaryblob </binary>
     <partition> rfs:partition </partition>
     <extended> rfs:extended </extended>
     <partition> rfs:partition </partition>
   </msdoshd>

.. __element_description_5:

Element description
-------------------

name `rfs:string <#type-string>`__
   human readable name of the harddisk, this will be used as name for
   the image file

size `rfs:part_size <#type-part_size>`__
   size of the harddisk

grub-install `rfs:string <#type-string>`__
   human readable name of the harddisk, this will be used as name for
   the image file

binary `rfs:binaryblob <#type-binaryblob>`__ **optional**
   binary blob that is ddâ€™ed to the specified offset

partition `rfs:partition <#type-partition>`__
   Partition Entries of this harddisk (max: 4)

extended `rfs:extended <#type-extended>`__
   Extended Partition Entries of this harddisk (max: 1)

partition `rfs:partition <#type-partition>`__
   Partition Entries of this harddisk (max: 3)

.. _images:

TYPE: images
============

container for all storage devices of the target

.. __example_25:

Example
-------

.. code:: xml

   <images>
     <mtd> rfs:mtd </mtd>
     <msdoshd> rfs:msdoshd </msdoshd>
     <gpthd> rfs:gpthd </gpthd>
     <passno> rfs:string </passno>
   </images>

.. __element_description_6:

Element description
-------------------

mtd `rfs:mtd <#type-mtd>`__
   container for all mtd devices of the target

msdoshd `rfs:msdoshd <#type-msdoshd>`__
   container for Harddisks with msdos Partitionlabel.

gpthd `rfs:gpthd <#type-gpthd>`__
   container for Harddisks with GPT Partitionlabel

passno `rfs:string <#type-string>`__
   passno order for fsck

.. _fs:

TYPE: fs
========

description of a linux filesystem

.. __example_26:

Example
-------

::

   no sequence

.. _bylabel:

TYPE: bylabel
=============

mount storage by the label of the partition or volume

.. __example_27:

Example
-------

::

   no sequence

.. _bydev:

TYPE: bydev
===========

mount virtual filesystems or other storage devices device-node

.. __example_28:

Example
-------

::

   no sequence

.. _fstab:

TYPE: fstab
===========

container for mounts

.. __example_29:

Example
-------

.. code:: xml

   <fstab>
     <bylabel> rfs:bylabel </bylabel>
     <bydev> rfs:bydev </bydev>
   </fstab>

.. __element_description_7:

Element description
-------------------

bylabel `rfs:bylabel <#type-bylabel>`__
   describes a mount by a volume or partition label

bydev `rfs:bydev <#type-bydev>`__
   describes a mount based on a device node or a mount of a virtual
   filesystem like debugfs or tmpfs

.. _package:

TYPE: package
=============

list of packages, each contains the hole rootfilesystem

.. __example_30:

Example
-------

::

   no sequence

.. _tar:

TYPE: tar
=========

describes a tar package

.. __example_31:

Example
-------

::

   no sequence

.. _cpio:

TYPE: cpio
==========

describes a cpio package

.. __example_32:

Example
-------

::

   no sequence

.. _squashfs:

TYPE: squashfs
==============

describes a squashfs image

.. __example_33:

Example
-------

::

   no sequence

.. _partition:

TYPE: partition
===============

describes a partition of a harddisk

.. __example_34:

Example
-------

::

   no sequence

.. _extended:

TYPE: extended
==============

describes a extended partition of a harddisk

.. __example_35:

Example
-------

.. code:: xml

   <extended>
     <size> rfs:part_size </size>
     <logical> rfs:partition </logical>
   </extended>

.. __element_description_8:

Element description
-------------------

size `rfs:part_size <#type-part_size>`__
   size of the partition

logical `rfs:partition <#type-partition>`__
   logical partition of this extended partition

.. _part_size:

TYPE: part_size
===============

Helper around part_size_restriction to allow XML base attribute

.. __example_36:

Example
-------

::

   no sequence

.. _part_size_restriction:

SIMPLE TYPE: part_size_restriction
==================================

format of the partition size

.. __base_type_6:

Base Type
---------

*string*

.. __restrictions_6:

Restrictions
------------

+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| *pa | (\d | M   | G   | kB  | MB  | GB  | kiB | MiB | GiB | rem |
| tte | +(k |     |     |     |     |     |     |     | )?  | ain |
| rn* |     |     |     |     |     |     |     |     |     | )   |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+

.. _part_nr:

TYPE: part_nr
=============

Helper around part_nr_restriction to allow XML base attribute

.. __example_37:

Example
-------

::

   no sequence

.. _part_nr_restriction:

SIMPLE TYPE: part_nr_restriction
================================

allow maximum 4 primary partitions

.. __base_type_7:

Base Type
---------

*integer*

.. __restrictions_7:

Restrictions
------------

+-----------------------------------+-----------------------------------+
| *minInclusive*                    | 1                                 |
+-----------------------------------+-----------------------------------+
| *maxInclusive*                    | 4                                 |
+-----------------------------------+-----------------------------------+

.. _part_type:

TYPE: part_type
===============

Helper around part_type_restriction to allow XML base attribute

.. __example_38:

Example
-------

::

   no sequence

.. _part_type_restriction:

SIMPLE TYPE: part_type_restriction
==================================

list of supported partition types

.. __base_type_8:

Base Type
---------

*string*

.. __restrictions_8:

Restrictions
------------

+-----------------------------------+-----------------------------------+
| *enumeration*                     | linux                             |
+-----------------------------------+-----------------------------------+
| *enumeration*                     | swap                              |
+-----------------------------------+-----------------------------------+

.. _fs_type:

TYPE: fs_type
=============

Helper around fs_type_restriction to allow XML base attribute

.. __example_39:

Example
-------

::

   no sequence

.. _fs_type_restriction:

SIMPLE TYPE: fs_type_restriction
================================

list of supported filesystems

.. __base_type_9:

Base Type
---------

*string*

.. __restrictions_9:

Restrictions
------------

+-----------------------------------+-----------------------------------+
| *enumeration*                     | ext2                              |
+-----------------------------------+-----------------------------------+
| *enumeration*                     | ext3                              |
+-----------------------------------+-----------------------------------+
| *enumeration*                     | ext4                              |
+-----------------------------------+-----------------------------------+
| *enumeration*                     | xfs                               |
+-----------------------------------+-----------------------------------+
| *enumeration*                     | ubifs                             |
+-----------------------------------+-----------------------------------+
| *enumeration*                     | tmpfs                             |
+-----------------------------------+-----------------------------------+
| *enumeration*                     | debugfs                           |
+-----------------------------------+-----------------------------------+
| *enumeration*                     | configfs                          |
+-----------------------------------+-----------------------------------+
| *enumeration*                     | devpts                            |
+-----------------------------------+-----------------------------------+
| *enumeration*                     | proc                              |
+-----------------------------------+-----------------------------------+
| *enumeration*                     | sysfs                             |
+-----------------------------------+-----------------------------------+
| *enumeration*                     | vfat                              |
+-----------------------------------+-----------------------------------+
| *enumeration*                     | btrfs                             |
+-----------------------------------+-----------------------------------+
| *enumeration*                     | devtmpfs                          |
+-----------------------------------+-----------------------------------+

.. _finetuning:

TYPE: finetuning
================

container for finetuning commands; these commands are executed in
theroot of the target filesystem after the target filesystem was created

.. __example_40:

Example
-------

.. code:: xml

   <finetuning>
   </finetuning>

.. __element_description_9:

Element description
-------------------

.. _project-finetuning:

TYPE: project-finetuning
========================

container for project-finetuning commands; these commands are executed
in theproject directory, after the images have been generated.

.. __example_41:

Example
-------

.. code:: xml

   <project-finetuning>
   </project-finetuning>

.. __element_description_10:

Element description
-------------------

.. _losetup:

TYPE: losetup
=============

Container for image_finetuning commands; these commands are executed in
theproject directory, while a drive image is setup as a loop device.The
loop device id is passed to the individual actions.

.. __example_42:

Example
-------

.. code:: xml

   <losetup>
   </losetup>

.. __element_description_11:

Element description
-------------------

.. _extract_partition:

TYPE: extract_partition
=======================

Describe the partition to be extracted (nr) and the destination
filename.The value of the tag describes the filename of the generated
Imagefile.The Image is per default compressed with gzip afterwards.

.. __example_43:

Example
-------

::

   no sequence

.. _copy_from_partition:

TYPE: copy_from_partition
=========================

Attribute *part* describes the partition to be mounted (nr).The value of
the tag describes the filename to be copied from theFilesystem, after it
has been mounted.Attribute *artifact* is the artifact name.

.. __example_44:

Example
-------

::

   no sequence

.. _copy_to_partition:

TYPE: copy_to_partition
=======================

Attribute *part* describes the partition to be mounted (nr).The value of
the tag describes the filename where the artifact shallbe copied to,
onto the filesystem, after it has been mounted.Attribute *artifact* is
the artifact name.

.. __example_45:

Example
-------

::

   no sequence

.. _addgroup:

TYPE: addgroup
==============

describes an additional user group to be created. the following
parameters areavailable:'gid' - group id.'system = "True" - system
group.The value of the tag describes the group name namefor the account.

.. __example_46:

Example
-------

::

   no sequence

.. _img_convert:

TYPE: img_convert
=================

Describe the Image to be converted.The value of the tag describes the
filename of the source Imagefile.The dst attribute the destination
filename, and the fmt attribute isthe format. (See *qemu-img --help* for
a list of possible formats)The Image is per default compressed with gzip
afterwards.

.. __example_47:

Example
-------

::

   no sequence

.. _set_packer:

TYPE: set_packer
================

Set the packer to use for an artifaxct.The value of the tag describes
the filename of the Imagefile.The packer attribute may take the
following values:(none, gzip, tar, targz, tarxz)

.. __example_48:

Example
-------

::

   no sequence

.. _adduser:

TYPE: adduser
=============

describes an additional user account, the following parameters
areavailable:'shell' - the login shell for the user.\ *passwd* - the
(optional) password for the user.\ *groups* - a comma separated list of
groups the user is member of.\ *uid* - (optional) user of the
user.\ *gid* - (optional) primary group, may be numeric or a
name.\ *home* - home directory.\ *system="True"* - system
user.\ *create_home="False"* - do not create the home
directory.\ *create_group = "False"* - Do not create the primary
group.The value of the tag describes the login name for the account.

.. __example_49:

Example
-------

::

   no sequence

.. _cpmv:

TYPE: cpmv
==========

describes a copy or move of an element in the rootfilesystem

.. __example_50:

Example
-------

::

   no sequence

.. _rm:

TYPE: rm
========

describes a removal of a pattern from the rootfilesystem.Including an
exclude pattern

.. __example_51:

Example
-------

::

   no sequence

.. _mknod:

TYPE: mknod
===========

describes a mknod operaition in finetuning

.. __example_52:

Example
-------

::

   no sequence

.. _git_src:

TYPE: git_src
=============

URI of the git repository, e.g. "git://myhost/myrepo.git"

.. __example_53:

Example
-------

::

   no sequence

.. _svn_src:

TYPE: svn_src
=============

URI of the svn repository, e.g. "svn://myhost/myrepo/tags/my_tag"

.. __example_54:

Example
-------

::

   no sequence

.. _pkg:

TYPE: pkg
=========

describes a debian binary package

.. __example_55:

Example
-------

::

   no sequence

.. _pbuilder:

TYPE: pbuilder
==============

reference to debian source packages

.. __example_56:

Example
-------

.. code:: xml

   <pbuilder>
     <git> rfs:git_src </git>
     <svn> rfs:svn_src </svn>
   </pbuilder>

.. __element_description_12:

Element description
-------------------

git `rfs:git_src <#type-git_src>`__
   reference to a git tree hosting a debian source package. The source
   will be build with a pbuilder before the image generation. Use the
   *install* attribute to specify which binary packages should be
   installed in the target image.

svn `rfs:svn_src <#type-svn_src>`__
   reference to a svn repository hosting a debian source package. The
   source will be build with a pbuilder before the image generation. Use
   the *install* attribute to specify which binary packages should be
   installed in the target image.

.. _pkg-list:

TYPE: pkg-list
==============

container of debian packages

.. __example_57:

Example
-------

.. code:: xml

   <pkg-list>
     <pkg> rfs:pkg </pkg>
   </pkg-list>

.. __element_description_13:

Element description
-------------------

pkg `rfs:pkg <#type-pkg>`__
   reference to a binary debian package which will be installed from the
   given mirrors into the target rootfilesystem.

.. _blacklist:

TYPE: blacklist
===============

blacklists of debian packages

.. __example_58:

Example
-------

.. code:: xml

   <blacklist>
     <sysroot> rfs:pkg-list </sysroot>
   </blacklist>

.. __element_description_14:

Element description
-------------------

sysroot `rfs:pkg-list <#type-pkg-list>`__
   avoid installing the specified packages into the sysroot

.. _fullpkg-list:

TYPE: fullpkg-list
==================

List of packages to be validated against the installed list.

.. __example_59:

Example
-------

.. code:: xml

   <fullpkg-list>
     <pkg> rfs:pkg </pkg>
   </fullpkg-list>

.. __element_description_15:

Element description
-------------------

pkg `rfs:pkg <#type-pkg>`__
   Reference to a binary debian package which is supposed to be
   installed.

.. _conf:

TYPE: conf
==========

describes a preseeding entry

.. __example_60:

Example
-------

::

   no sequence

.. _preseed:

TYPE: preseed
=============

container of config entries

.. __example_61:

Example
-------

.. code:: xml

   <preseed>
     <conf> rfs:conf </conf>
   </preseed>

.. __element_description_16:

Element description
-------------------

conf `rfs:conf <#type-conf>`__
   A config entry

.. _empty:

TYPE: empty
===========

This element just acts like a flag. It might be there, or not.

.. __example_62:

Example
-------

::

   no sequence

.. _string:

TYPE: string
============

E.L.B.E. standard string. Allow XML base attribute.

.. __example_63:

Example
-------

::

   no sequence
